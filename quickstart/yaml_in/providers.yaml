# qiskit-terra

qiskit-terra:
  support_primitives: true
  code: |
    from qiskit.primitives import Sampler
    sampler = Sampler()

# real hardware

qiskit-ibm-runtime:
  support_primitives: true
  code: |
    from qiskit_ibm_runtime import QiskitRuntimeService, Sampler
    service = QiskitRuntimeService()
    backend = service.backend("ibmq_qasm_simulator")
    sampler = Sampler(session=backend)

qiskit-ibm-provider:
  support_primitives: false
  code: |
    from qiskit_ibm_provider import IBMProvider
    provider = IBMProvider()
    backend = provider.get_backend("ibmq_qasm_simulator")

qiskit-ionq-provider:
  support_primitives: false
  code: |
    from qiskit_ionq import IonQProvider
    provider = IonQProvider("MY_IONQ_TOKEN")
    backend = provider.get_backend("ionq_simulator")

qiskit-quantinuum-provider:
  support_primitives: false
  code: |
    from qiskit_quantinuum import Quantinuum
    backend = Quantinuum.backends("DEVICE_NAME")

# simulators

qiskit-aer:
  support_primitives: true
  code: |
    from qiskit_aer.primitives import Sampler
    sampler = Sampler()

cuquantum:
  support_primitives: false
  code: |
    from cusvaer.backends import StatevectorSimulator
    backend = StatevectorSimulator()

# multiplatforms

azure-quantum:
  support_primitives: false
  code: |
    from azure.quantum.qiskit import AzureQuantumProvider
    provider = AzureQuantumProvider(resource_id="MY_RESOURCE_ID",location="MY_LOCATION")
    backend = provider.get_backend("ionq.simulator")

qiskit-braket-provider:
  support_primitives: false
  code: |
    from qiskit_braket_provider import AWSBraketProvider
    provider = AWSBraketProvider()
    backend = provider.backends("SV1")