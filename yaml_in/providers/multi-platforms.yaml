id: multi-platforms
title: Multi-platforms
description: Multi-platforms are cloud services that allow you to connect with several quantum services from different vendors.
providers:
  - title: Azure Quantum
    image: null
    description: Qiskit provider for IonQ backends.
    installation: pip install "azure-quantum[qiskit]"
    websiteCta:
      label: Website
      url: https://aka.ms/aq
    docsCta:
      label: Docs
      url: https://aka.ms/AQ/Qiskit/QuickStart
    sourceCta:
      label: null
      url: null
    code: 
      backend: |-
        from azure.quantum.qiskit import AzureQuantumProvider
        provider = AzureQuantumProvider(resource_id="MY_RESOURCE_ID",location="MY_LOCATION")
        backend = provider.get_backend("ionq.simulator")

  - title: Amazon Braket
    image: null
    description: Execute Qiskit programs on AWS quantum computing hardware devices through
      Amazon Braket
    installation: pip install qiskit_braket_provider
    websiteCta:
      label: Website
      url: https://aws.amazon.com/braket/
    docsCta:
      label: Docs
      url: https://qiskit-community.github.io/qiskit-braket-provider/
    sourceCta:
      label: GitHub
      url: https://github.com/qiskit-community/qiskit-braket-provider
    code: 
      backend: |-
        from qiskit_braket_provider import AWSBraketProvider
        provider = AWSBraketProvider()
        backend = provider.backends("SV1")
  - title: SuperstaQ
    image: null
    description: A hardware-agnostic software platform that connects applications to quantum computers from IBM Quantum, IonQ, and Rigetti.
    installation: pip install qiskit-superstaq
    websiteCta:
      label: Website
      url: https://www.super.tech/about-superstaq/
    docsCta:
      label: Docs
      url: null
    sourceCta:
      label: GitHub
      url: https://github.com/SupertechLabs/qiskit-superstaq
    code:
      backend: |-
        from qiskit_superstaq import SuperstaQProvider
        provider = SuperstaQProvider("MY_SUPERSTAQ_TOKEN")
        backend = provider.get_backend("ibmq_qasm_simulator")